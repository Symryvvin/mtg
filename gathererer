Развить идею, что класс Card это реальный объект идентифицированный бумажным носителем
Разбить на классы наследники NormalCard, DoubleFacedCard, SplitCard, MeltCard, FlipCard

NormalCard {
	multiverseID
	oracleID
	Content {
		все остальные данные из divrow
	}
}

DoubleFacedCard {
	private static final FACE_ID = 0;
	private static final BACK_ID = 1;
	int[] multiverseIDs
	int[] oracleIDs
	Content[] contents {
		все остальные данные из divrow
	}
}

SplitCard {
	private static final LEFT_ID = 0;
	private static final RIGHT_ID = 1;	
	int multiverseID
	int oracleID
	Content[] contents {
		все остальные данные из divrow
	}	
}



https://topdeck.ru/forums/topic/144062-%D1%81%D0%BE%D0%BA%D1%80%D0%BE%D0%B2%D0%B8%D1%89%D0%B0-%D1%80%D1%83%D1%84%D0%BE%D0%B9%D0%BB-%D0%B8%D0%BA%D1%81%D0%B0%D0%BB%D0%B0%D0%BD-rix-grn-m19-fnm/?tab=comments#comment-1222205

CREATE TABLE t1 (jdoc JSON);

INSERT INTO t1 VALUES('{"sypertype": 1, "types": [2,5], "subtypes": [54,123]}');
INSERT INTO t1 VALUES('{"sypertype": 1, "types": [24,5], "subtypes": [54,1223]}');
INsert into t1 values('{"sypertype": 2, "types": [1,4], "subtypes": [154,123]}');

SELECT jdoc FROM t1;

select jdoc->>"$.types" FROM t1;

SELECT json_extract(jdoc, '$.subtypes') FROM t1;

SELECT * FROM t1 WHERE json_contains(
	jdoc, 
	(SELECT CAST((type_id) AS CHAR) FROM card_type WHERE type_name = 'Legendary'), 
	'$.types');

select CAST((type_ID) AS CHAR) from card_type where type_name = 'Legendary';


CREATE TABLE facts (sentence JSON);

INSERT INTO facts VALUEs (JSON_OBJECT("mascot", "Our mascot is a dolphin named \"Sakila\"."));

SELECT sentence FROM facts;


SELECT sentence->>"$.mascot" FROM facts;





Алгоритм парсинга страницы http://gatherer.wizards.com/Pages/Card/Languages.aspx с параметром multiverseid

package ru.aizen.card.mana;

import ru.aizen.card.Color;

import java.util.ArrayList;
import java.util.List;
import java.util.stream.Collectors;

public class ManaCost {
    private List<Mana> cost;
    private int convertedManaCost;

    public ManaCost() {
        cost = new ArrayList<>();
    }

    public ManaCost addMana(String name) {
        cost.add(Mana.from(name));
        return this;
    }
	
    public String getCost() {
        return cost.stream()
                .map(Mana::getValue)
                .reduce("", (x, y) -> x + y);
    }

    public int getConvertedManaCost() {
        if (!cost.isEmpty())
            return convertedManaCost;
        return cost.stream()
                .mapToInt(Mana::getCost)
                .sum();
    }
	
	public List<Color> getColors() {
		if (!cost.isEmpty() && !onlyColorless()) {
			return getColorsFromColoredMana();
		}
		return null;
	}
	
	private boolean onlyColorless(){
		return cost.stream().allMatch(m -> m.getColor() == Color.COLORLESS;
	}

    public Color getColor() {
        if (cost.isEmpty()) {
            return null;
        }
        if (onlyColorless()) {
            return Color.COLORLESS;
        }
        List<Color> colors = getColorsFromColoredMana();
        if (!colors.isEmpty()) {
			for (Color c : Color.values()){
				if (allMatch(colors, c)) {
					return c;
				}
			}
			return Color.MULTICOLOR;
        }
        return null;
    }
	
	private List<Color> getColorsFromColoredMana() {
		return cost.stream()
                .filter(Mana::isColored)
				.map(Mana:getColor)
                .collect(Collectors.toList());
	}
	
	private boolean allMatch(List<Color> colors, Color color) {
		return colors.stream()
				.allMatch(color);
	}

    public void setConvertedManaCost(String convertedManaCost) {
        this.convertedManaCost = Integer.parseInt(convertedManaCost);
    }

    @Override
    public String toString() {
        return getCost() + "[" + getConvertedManaCost() + "] : " + getColor();
    }
}

CN("Chinese Simplified", "cs", "CN"),
ZH_TW("Chinese Traditional", "ct", "CN"),
DE("German", "de", "DE"),
EN("English", "en", "GB"),
FR("French", "fr", "FR"),
IT("Italian", "it", "IT"),
JA("Japanese", "ja", "JP"),
KO("Korean", "ko", "KR"),
PT_BR("Portuguese (Brazil)", "pt", "PT"),
RU("Russian", "ru", "RU"),
ES("Spanish", "es", "ES");


private String pageName;
private Map<String, Element> data;
	
	
public DetailsParser(int multiverseID, boolean isOracle) {
	this.multiverseID = multiverseID;
	this.isOracle = isOracle;
}


public Card parse() {
	///---
	var contents = page.select(CARD_CONTENT);
	pageName = page.getElementById(EN_NAME_ELEMENT).text(); 
	data = contents.stream()
		.map(DivRow::new))
		.filter(dr -> pageName.equals(dr.getValue(NAME).text()))
		.findFirst()
		.orElseThrow(() -> new ParserException("Actual page name " + actualPageName + " not match with any card names in contents. " +
				"Use parse oracle data only with oracle multiverseID"));
	return parseCard();
}	

public class DivRow extend HashMap<String, Element> {

    public DivRow(Elements content) {
		var rows = content.getElementsByClass("row");
		rows.stream()
             .filter(row -> !div.selectFirst("div.label").text().isEmpty())
			 .forEach(row -> put(
					div.selectFirst("div.label").text().replace(":", ""),
					div.selectFirst("div.value")));
    }

    public Element getValue(String label) {
        return get(label);
    }
}
