package ru.aizen.parser;

import org.apache.http.client.utils.URIBuilder;
import org.jsoup.Jsoup;
import org.jsoup.nodes.Element;
import org.jsoup.select.Elements;
import ru.aizen.card.Card;
import ru.aizen.card.Rarity;
import ru.aizen.card.Stats;
import ru.aizen.card.mana.Mana;
import ru.aizen.card.mana.ManaCost;
import ru.aizen.card.type.CardType;

import java.util.Collections;
import java.util.List;

public class DetailsParser {
    private static final String CONTENT_ID = "ctl00_ctl00_ctl00_MainContent_SubContent_SubContent_";
    private static final String CARD_CONTENT = "div.cardContent";
    private static final String CARD_IMAGE = "div.cardImage";
    private static final String NAME = CONTENT_ID + "nameRow";
    private static final String MANA = CONTENT_ID + "manaRow";
    private static final String CMC = CONTENT_ID + "cmcRow";
    private static final String TYPES = CONTENT_ID + "typeRow";
    private static final String TEXT = CONTENT_ID + "textRow";
    private static final String FLAVOR = CONTENT_ID + "flavorRow";
    private static final String PT = CONTENT_ID + "ptRow";
    private static final String SET = CONTENT_ID + "setRow";
    private static final String RARITY = CONTENT_ID + "rarityRow";
    private static final String ALL_SET = CONTENT_ID + "otherSetsRow";
    private static final String NUMBER = CONTENT_ID + "numberRow";
    private static final String ARTIST = CONTENT_ID + "artistRow";
    private static final String LINKED = CONTENT_ID + "linkedRow";

    private static final String VALUE = "div.value";

    public List<Card> parse(String html, String url, int multiverseID) throws Exception {
     //   var uri = new URIBuilder(url)
           //     .addParameter("multiverseID", String.valueOf(multiverseID))
         //       .build();
        var page = Jsoup.parse(html);//Jsoup.connect(uri.toString()).timeout(20000).get();
        if (true) {
            return Collections.singletonList(parseCard(multiverseID, page.selectFirst(CARD_CONTENT)));
        }
        return null;
    }

    private Card parseCard(int multiverseID, Element content) throws Exception {
        return Card.builder(multiverseID)
                .setName(name(content))
                .setManaCost(mana(content))
                .setCardType(types(content))
                .setRarity(rarity(content))
                .setExpansionSet(expansionSet(content))
                .setText(text(content))
                .setFlavorText(flavor(content))
                .setWatermark(null)
                .setStats(stats(content))
                .setNumber(number(content))
                .setArtist(artist(content))
                .build();
    }

    private String name(Element content) {
        return content.getElementById(NAME)
                .selectFirst(VALUE)
                .text();
    }

    private ManaCost mana(Element content) throws Exception {
        ManaCost result = new ManaCost();
        Elements mana = content.getElementById(MANA)
                .selectFirst(VALUE).children();
        for (Element m : mana) {
            var alt = m.attr("alt");
            result.addMana(Mana.from(alt));
        }
        return result;
    }

    private CardType types(Element content) {
        return new CardType(content.getElementById(TYPES)
                .selectFirst(VALUE)
                .text());
    }

    private String text(Element content) {
        var result = content.getElementById(TEXT);
        if (result == null)
            return null;
        return content.getElementById(TEXT)
                .selectFirst(VALUE)
                .text();
    }

    private String flavor(Element content) {
        var result = content.getElementById(FLAVOR);
        if (result == null)
            return null;
        return content.getElementById(FLAVOR)
                .selectFirst(VALUE)
                .select("div.flavortextbox")
                .stream()
                .map(Element::text)
                .reduce("", (x, y) -> x + y + " ")
                .trim();
    }

    private Stats stats(Element content) {
        return new Stats(types(content).getSpellType(),content.getElementById(PT)
                    .selectFirst(VALUE)
                    .text());
    }

    private String expansionSet(Element content) {
        return content.getElementById(SET)
                .selectFirst(VALUE)
                .child(0)
                .child(1)
                .text();
    }

    private Rarity rarity(Element content) {
        return Rarity.from(content.getElementById(RARITY)
                .selectFirst(VALUE)
                .selectFirst("span")
                .text());
    }

    private String number(Element content) {
        return content.getElementById(NUMBER)
                .selectFirst(VALUE)
                .text();
    }

    private String artist(Element content) {
        return content.getElementById(ARTIST)
                .selectFirst(VALUE)
                .selectFirst("a")
                .text();
    }

    public String linked(Element content) {
        return content.getElementById(LINKED)
                .selectFirst(VALUE)
                .text();
    }
}
